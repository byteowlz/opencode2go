#!/usr/bin/env bun

import { readdir } from 'fs/promises'
import { join, extname } from 'path'
import { parseArgs } from 'util'
import { $ } from 'bun'
import { createInterface } from 'readline'

const args = parseArgs({
  args: process.argv.slice(2),
  options: {
    'logo-dir': {
      type: 'string',
      default: './logo'
    },
    help: {
      type: 'boolean',
      short: 'h'
    }
  }
})

if (args.values.help) {
  console.log(`
Usage: bun generate-icons.js [options]

Options:
  --logo-dir <path>    Directory containing logo files (default: ./logo)
  -h, --help          Show this help message
`)
  process.exit(0)
}

const logoDir = args.values['logo-dir']

async function getAvailableLogos(dir) {
  try {
    const files = await readdir(dir)
    return files
      .filter(file => ['.svg', '.png', '.jpg', '.jpeg'].includes(extname(file).toLowerCase()))
      .sort()
  } catch (error) {
    console.error(`Error reading logo directory "${dir}":`, error.message)
    process.exit(1)
  }
}

function displayLogos(logos) {
  console.log('\nAvailable logos:')
  logos.forEach((logo, index) => {
    console.log(`  ${index + 1}. ${logo}`)
  })
  console.log()
}

function promptUser(question) {
  const rl = createInterface({
    input: process.stdin,
    output: process.stdout
  })
  
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close()
      resolve(answer.trim())
    })
  })
}

async function selectLogo(logos, platform) {
  while (true) {
    const answer = await promptUser(`Select logo for ${platform} (1-${logos.length}): `)
    const index = parseInt(answer) - 1
    
    if (index >= 0 && index < logos.length) {
      return logos[index]
    }
    
    console.log('Invalid selection. Please try again.')
  }
}

async function generateIcons(logoPath, platform) {
  console.log(`\nGenerating ${platform} icons...`)
  
  try {
    await $`bun tauri icon ${logoPath}`
    console.log(`✅ ${platform} icons generated successfully`)
  } catch (error) {
    console.error(`❌ Failed to generate ${platform} icons:`, error.message)
    process.exit(1)
  }
}

async function backupIOSIcons() {
  console.log('📱 Backing up iOS icon folder...')
  
  // Only backup the asset catalog since that's what gets regenerated by tauri icon
  const assetCatalogPath = 'src-tauri/gen/apple/Assets.xcassets/AppIcon.appiconset'
  const backupPath = `${assetCatalogPath}.backup`
  
  try {
    // Remove any existing backup (ignore errors)
    try {
      await $`rm -rf ${backupPath}`
    } catch {}
    
    // Check if the path exists and copy it
    try {
      await $`cp -r ${assetCatalogPath} ${backupPath}`
      console.log(`✅ Backed up ${assetCatalogPath}`)
    } catch {
      console.log(`⚠️  ${assetCatalogPath} doesn't exist yet, skipping backup`)
    }
  } catch (error) {
    console.error(`❌ Failed to backup iOS icons:`, error.message)
    process.exit(1)
  }
  
  console.log('✅ iOS icons backup completed')
}

async function restoreIOSIcons() {
  console.log('📱 Restoring iOS icon folders...')
  
  // Restore the Xcode asset catalog
  const assetCatalogPath = 'src-tauri/gen/apple/Assets.xcassets/AppIcon.appiconset'
  const assetCatalogBackup = `${assetCatalogPath}.backup`
  
  try {
    try {
      await $`rm -rf ${assetCatalogPath}`
      await $`mv ${assetCatalogBackup} ${assetCatalogPath}`
      console.log(`✅ Restored ${assetCatalogPath}`)
    } catch {
      console.log(`⚠️  No backup found for ${assetCatalogPath}, skipping restore`)
    }
  } catch (error) {
    console.error(`❌ Failed to restore asset catalog:`, error.message)
    process.exit(1)
  }
  
  // Copy PNG files from asset catalog to icons/ios directory
  const iosIconsPath = 'src-tauri/icons/ios'
  
  try {
    // Ensure the ios directory exists
    await $`mkdir -p ${iosIconsPath}`
    
    // Copy all PNG files from asset catalog to ios directory (excluding JSON files)
    await $`cp ${assetCatalogPath}/*.png ${iosIconsPath}/`
    console.log(`✅ Copied iOS icons from asset catalog to ${iosIconsPath}`)
  } catch (error) {
    console.error(`❌ Failed to copy iOS icons:`, error.message)
    process.exit(1)
  }
  
  console.log('✅ iOS icons restore completed')
}

async function main() {
  console.log(`🔍 Looking for logos in: ${logoDir}`)
  
  const logos = await getAvailableLogos(logoDir)
  
  if (logos.length === 0) {
    console.error(`No logo files found in "${logoDir}"`)
    process.exit(1)
  }
  
  displayLogos(logos)
  
  const iosLogo = await selectLogo(logos, 'iOS')
  const desktopLogo = await selectLogo(logos, 'desktop/macOS')
  
  console.log(`\nSelected logos:`)
  console.log(`  iOS: ${iosLogo}`)
  console.log(`  Desktop: ${desktopLogo}`)
  
  const iosLogoPath = join(logoDir, iosLogo)
  const desktopLogoPath = join(logoDir, desktopLogo)
  
  // Step 1: Generate iOS icons first
  await generateIcons(iosLogoPath, 'iOS')
  
  // Step 2: Backup the iOS icon folder
  await backupIOSIcons()
  
  // Step 3: Generate desktop icons (this overwrites everything)
  await generateIcons(desktopLogoPath, 'desktop')
  
  // Step 4: Restore the iOS icon folder
  await restoreIOSIcons()
  
  console.log('\n🎉 All icons generated successfully!')
  console.log('\nNext steps:')
  console.log('  - Desktop icons are ready for use')
  console.log('  - iOS icons have been preserved and will be used when building for iOS')
}

main().catch(console.error)